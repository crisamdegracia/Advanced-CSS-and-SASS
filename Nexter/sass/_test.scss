/* .container {
	background-color: #eee;
	width: 1000px;
	margin: 30px auto;
	padding: 30px 20px;

	// start to use grid
	display: grid;

	// 1st value - 1st row  | 2nd value and row
	grid-template-rows: repeat(2, 150px);

	// all spaces are devided then assigned the spaces
	grid-template-columns: 1fr 2fr 1fr;

	// different gap for row and column
	grid-row-gap: 20px;
	grid-column-gap: 20px;

	//both column and row gap - same px
	grid-gap: 30px;
}
.item {
	padding: 20px;
	font-size: 30px;
	font-family: serif;
	color: #fff;
}

.item--6 {
	background-color: orangered;
	grid-row: 1 / 2;
	grid-column: 2 / 3;

}


.item--1 {
	background-color: green;
	// grid-row-start: 2;
	// grid-row-end: 3;
	// grid-column-start: 2;
	// grid-column-end: 3;

	// shorthand
	grid-row: 2 / 3;
	grid-column: 2 / 3;

}
.item--2 {
	background-color: violet;
}
.item--3 {
	background-color: pink;
}
.item--4 {
	background-color: blue;
}
.item--5 {
	background-color: brown; 

	// grid-row: 1 / 2;
	// grid-column: 3 / 4;
	
	//1st row line where to start
	//2nd  column number to start
	//3rd row line to end
	//4th column line to end
	grid-area: 1 / 3 / 2 / 4;
}

 */

// Method 1
/* Line numbers

.challenge {
	width: 1000px;
	margin: 30px auto;

	display: grid;
	grid-template-rows: 100px 200px 400px 100px;
	grid-template-columns: repeat(3, 1fr) 200px;
	grid-gap: 30px;
	& > * {
		background-color:#231;
		padding: 20px;
		color: #fff;
		font-size: 30px;
		font-family: sans-serif;
	} 
	

.header {
	grid-column: 1 / -1;
}

.sidebar {
	grid-column: 4 / 5;
	grid-row: 2 / span 2 ;
}

.main-content {
	grid-column: 1 / span 3;
}
.footer {
	grid-column: 1 / -1;
	grid-row: 4 / span 4;

}
}

*/

// Method 2
// Line names
/* 
.challenge {
	width: 1000px;
	margin: 30px auto;

	display: grid;
	grid-template-rows: [header-start] 100px [header-end box-start] 200px [box-end main-start] 400px [main-end footer-start] 100px [footer-end];
	grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 200px [grid-end];
	grid-gap: 30px;
	& > * {
		background-color:#231;
		padding: 20px;
		color: #fff;
		font-size: 30px;
		font-family: sans-serif;
	} 
	

.header {
	grid-column: col-start 1 / grid-end;
}

.sidebar {
	grid-column: col-end 3 / grid-end;
	grid-row: box-start / main-end  ;
}

.main-content {
	grid-column:col-start 1 / col-end 3;
}
.footer {
	grid-column: col-start  1 / grid-end;

}
}
 */

// Method 3: Name Grid Areas

// .challenge {
// 	width: 1000px;
// 	margin: 30px auto;

// 	display: grid;
// 	grid-template-rows: 100px 200px 400px 100px;
// 	grid-template-columns: repeat(3, 1fr) 200px;
// 	grid-gap: 30px;

// 	grid-template-areas: "head head head head"
// 						 "box box box side"
// 						 "main main main side"
// 						 "foot foot foot foot";
// 	& > * {
// 		background-color:#231;
// 		padding: 20px;
// 		color: #fff;
// 		font-size: 30px;
// 		font-family: sans-serif;
// 	}

// .header {
// 	grid-area: head;
// }

// .sidebar {
// 	grid-area: side;
// }

// .main-content {
//  grid-area: main;
// }
// .footer {
// grid-area: foot;
// }
// }

//F8V100
//100 Implicit Grids vs. Explicit Grids

.container {
	width: 1000px;
	margin: 30px auto;
	background-color: #ddd;

	display: grid;
	// grid-template-rows:repeat(2, 150px);
	// grid-template-columns:repeat(2, 1fr);
	grid-gap: 30px;

	// implicit designing
	//height of 80px
	grid-auto-rows: 80px;

	//defualt value - row;
	//now the remaining items now are no longer
	//added as rows but as columns
	//because we told out grid to flow as columns
	// grid-auto-flow: column;
	grid-auto-flow: row  dense;

	//now if we added more and more grid items
	// then we add it as new columns
	// if we can style the rows that are automatically added
	// we can do the same for the columns
	grid-auto-columns: 0.5fr;
	//the advantage daw is to control when we still dont know
	//how many will load

	/* ------------------------------------- */
	/* ALIGN TO GRID ITEMS TO GRID AREAS */
	/* ------------------------------------- */
	// align-items: center; //default value Stretch other - center / end / start

	// justify-items: center;//default value Stretch other - center / end / start
	/* ----------------------------------------------- */
	/* ----------------------------------------------- */

	/* ------------------------------------- */
	/* ALIGN TO GRID TRACKS TO GRID CONTAINER */
	/* ------------------------------------- */

	grid-template-rows: repeat(2, 100px);
	grid-template-columns: repeat(2, 200px);
	height: 1000px;


	//just like centering flex items
	// will center the child in the container

	justify-content: center; //center / start / end / space-between /space-around / space-evenly
	align-content: center;


	
	.item {
		padding: 20px;
		color: #fff;
		font-family: serif;
		font-size: 30px;
		background-color: #232;

		&--4 {
			background-color: crimson;
			grid-row: 2 / span 3;

			// align-self: start;
			// justify-self: start;
		}
		&--6 {
			background-color: red;
			grid-row: 2 / span 2;
		}
		&--7 {
			background-color: palevioletred;
			grid-column: 1 / -1;
		}
	}
}
