/* 
clearfix - is to append a pseudo element after the element 
which will then clear these floats
*/
/*
COLORS:

Follow these CSS code techniques to make our life easier.
*/
/*Margin*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translate(-1rem); }
  80% {
    transform: translate(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInFromBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

*,
*::after,
*::before {
  /* Global reset while following inheritance */
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  /*
    100% is equal to 16px - but we only want it 10px 
    so the computation 10/16 = .625 * 100%
    simple but very powerful on media-querries
    - this will allow user to zoom in page automatically
    - not only to change the font size but also to zoom in on the page
    a widely use technique CSS Dev Community
    but not supported below IE 9
    */
  font-size: 62.5%; }

/*
Import! this will be inherited to their child elements
*/
body {
  box-sizing: border-box; }

/*
Import! this will be inherited to their child elements
*/
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /*    font-size: 16px ;*/
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /*to remove the shaking*/
  backface-visibility: hidden;
  margin-bottom: 6rem;
  /* the name we created @ketframes 
    animation-name: moveInLeft;

    for the animation to start 
    animation-duration: 3s;

    animation to wait before starting 

    -webkit-animation-delay: 3s;
    -o-animation-delay: 3s;
    animation-delay: 3s;

    uulit ung animation kung ila naka set dito 
    animation-iteration-count: 3;

    animation-timing-function: ease-out;

    */ }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 800;
    letter-spacing: 3.5rem;
    animation: moveInLeft 3s ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.74rem; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: 2px;
  transition: all .2s;
  /*so it will not fill the whole width size for using gradient BG*/
  display: inline-block;
  /* these 3 below to make the heading gradient*/
  background-image: linear-gradient(to right, #55c57a, #28b485);
  -webkit-background-clip: text;
  color: transparent; }
  .heading-secondary:hover {
    transform: scale(1.1);
    text-shadow: 1rem 2rem 0.1rem rgba(0, 0, 0, 0.1); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.text-center {
  text-align: center; }

.mb-8 {
  margin-bottom: 8rem; }

.mb-6 {
  margin-bottom: 6rem; }

.mb-4 {
  margin-bottom: 4rem; }

.mb-2 {
  margin-bottom: 2rem; }

.mt-8 {
  margin-bottom: 8rem; }

.mt-6 {
  margin-bottom: 6rem; }

.mt-4 {
  margin-bottom: 4rem; }

.mt-2 {
  margin-bottom: 2rem; }

.p-2 {
  padding: 2rem; }

.p-4 {
  padding: 4rem; }

.p-6 {
  padding: 6rem; }

.p-8 {
  padding: 8rem; }

.pb-2 {
  padding: 2rem; }

.pb-4 {
  padding: 4rem; }

.pb-6 {
  padding: 6rem; }

.pb-8 {
  padding: 8rem; }

.pt-2 {
  padding: 2rem; }

.pt-4 {
  padding: 4rem; }

.pt-6 {
  padding: 6rem; }

.pt-8 {
  padding: 8rem; }

/*setting this to relative so child block and make display:absolute */
/*
shorthand - 
animation:  moveInLeft 3s ease-out;
animation-duration: 3s;

*/
.btn {
  /*when users click*/
  /*
    behind the button
    1st it to appear - content:""
    height: 100%; and width - paralumabas
    */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    border-radius: 10rem;
    padding: 1.5rem 4rem;
    display: inline-block;
    position: relative;
    transition: all .3s;
    font-size: 1.6rem;
    font-weight: 800; }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn:hover {
    /*to go a bit up */
    transform: translateY(-0.3rem);
    /* args - X and Y Blur color */
    box-shadow: 0 1rem 2rem black; }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.7);
      /* A fading effect */
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    background-color: #333;
    color: #fff;
    box-shadow: 0 0.5rem 1rem black; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /*fading effect*/
    transition: all .3s; }
  .btn--animated {
    /* Args =  name - duration - time function - delay*/
    animation: moveInFromBottom .5s ease-out .75s;
    /*
        it'll auto apply the style up to 0% b4 D animation starts
        now the style will be applied before the animation starts. simple by using this fill-mode:backwards
        */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  color: #7ed56f;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #7ed56f;
  padding: 3px;
  font-size: 1.6rem;
  transition: all .3s; }

.btn-text:hover {
  background-color: #7ed56f;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
  border-radius: 10px; }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0);
  background-color: #000;
  border-radius: 10px; }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    position: absolute;
    border-radius: 2px;
    z-index: 10;
    transition: all .2s;
    /* the off space of the outline border*/
    outline-offset: 1rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0rem;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      /* the border when hover*/
      outline: 1rem outset #7ed56f;
      transform: scale(1.2) translateY(-3rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.8); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: all .3s; }
  .feature-box__icon {
    font-size: 5rem;
    margin-bottom: .5rem;
    display: inline-block;
    /* to make gradient BG on text*/
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: translateY(-1rem) scale(1.1); }

.card {
  height: 50rem;
  /*
    perspective is where the rotation go with a wider size whatever?
    */
  perspective: 150rem;
  -moz-perspective: 150rem;
  -webkit-perspective: 150rem;
  -o-perspective: 150rem;
  position: relative; }
  .card__side {
    height: 50rem;
    transition: all .8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    overflow: hidden;
    /*hides the back part of an element*/
    backface-visibility: hidden;
    border-radius: .5rem;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
    text-align: center; }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotatey(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
  .card:hover .card__side--front {
    transform: rotatey(-180deg); }
  .card:hover .card__side--back {
    transform: rotatey(0); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    /*start top-left 0 0, x direction 0, y direction 100%*/
    clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
    -moz-clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
    -o-clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
    /*eto parang filter */
    background-blend-mode: screen; }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(/img/nat-5.jpg); }
    .card__picture--2 {
      background-image: url(../img/nat-5.jpg); }
    .card__picture--3 {
      background-image: url(../img/nat-5.jpg); }
  .card__heading {
    font-size: 2.6rem;
    font-weight: 300;
    text-transform: uppercase;
    color: #000;
    position: absolute;
    top: 0;
    left: 0; }

.row {
  max-width: 114rem;
  margin: 0 auto;
  /*
    without the 'not' we are selecting only last child 
    everything has margib bottom excepts last child. CLEVER!
    */
  /* see abstracts/_mixins */
  /*
    ^ - we want the beginning to be what we set here 
    * - it will select classes which contains the col-
    $ - it will select classes ends with col-
    what it does? - it will select all of the elements in which
    the class attribute starts
    */
  /* col-1-of-2*/ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    /*standard version of clearfix is to display:table*/
    display: table;
    /* the property that actually perform clearfix  */
    clear: both; }
  .row [class^="col-"] {
    /* para pumunta ung block sideways */
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    /*
        saloob ung calc - ganyan hash{} para gumana ung SASS $ variable
        
        to get the each column for 2 
            - 1st 100% of width minus the gutter
            - then divide it by 2 columns
        */
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    /*
        3 columns
        get 100% of width minus 2 gutter divide by 3 columns
            - 2 gutter becoz. look at the picture
            - 
        2 * $gutter-horizontal - kasi dalawa na ung gagawan ng margin
        
        
        */
    width: calc(( 100% - 2 * 6rem ) / 3); }
  .row .col-2-of-3 {
    /*
        twice the size of 1 column in 3 columns
            - 1st step, get the size of each column for 3 columns 
                - ( 100% - 2 * 6rem ) / 3)
            - then times it into two
                - (2 *
            - then add gutter
               - + 6rem)
      
        
        */
    width: calc( (2 *  ( 100% - 2 * 6rem ) / 3)  + 6rem); }
  .row .col-1-of-4 {
    /*
        4 columns 
            - 1st get the 100% of the width
            - 3 times * gutter
            - divide now in 4 columns
        */
    width: calc(( 100% - 3 * 6rem ) / 4); }
  .row .col-2-of-4 {
    /*
        to get twice of the size of the 4 columns
            - 1st get the single column size
                - ( 100% - 3 * 6rem )
            - 2nd divide it by 4
                - / 4
            - 3rd multiply it by 2 - becoz its 2 column right?
                - 2 *
            - 4th add the gutter
                - + 6rem
        
        0st get the size of the whole width
            - then 
        1st get the size of each gutter - or how many gutter
            - thats the total of whole width 
       
        
        2 columns + 1 gutter / 2 = is the total width of 2of4
        */
    width: calc( 2 * (( 100% - 3 * 6rem ) / 4  ) + 6rem); }
  .row .col-3-of-4 {
    /*
           Same method just read above comments.
        
        */
    width: calc( ( 3 * (( 100% - 3 * 6rem ) / 4 )  + 2 *  6rem )); }

/*
viewheight - at every point of the box it should 
be 95% of the viewport height
*/
.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(85, 197, 122, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: center;
  clip-path: polygon(100% 0, 100% 80%, 0 100%, 0 0);
  position: relative;
  /*
    to center element

    position: absolute;
    top:40%;
    left: 50%;
    are in relation in the main block element
    while transform is only related to the main element itself
    */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /*to center text*/
    text-align: center; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(85, 197, 122, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  background-size: cover;
  margin-top: -12rem;
  transform: skewY(-7deg);
  /*selects only the direct children*/ }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 50rem 0;
  margin-top: -10rem; }
